# -*- coding: utf-8 -*-
"""HundredSpeciesVERYCLEANCODE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JttK-XkeL2RXT6B3oygDqDAFSuCdpFgS
"""

from __future__ import absolute_import, division, print_function, unicode_literals

!pip install tensorflow==1.14.0rc1

#!pip install keras==2.2.4
import tensorflow as tf

import imageio
import os
import glob
import csv
import math
from pathlib import Path
import numpy as np
from skimage import io
from skimage import transform
from skimage import draw
from skimage import exposure
import matplotlib.pyplot as plt
import pickle
import requests
import tarfile
import dlib
import sys
from PIL import Image
from PIL.ExifTags import TAGS
!pip install -q tf-nightly
from google.colab import drive
drive.mount('/content/gdrive')
!pip install -U -q PyDrive ## you will have install for every colab session
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# 1. Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

!ls "/content/gdrive/My Drive/cifar-100-python"

 
import numpy as np
 
i
 
DATA_DIR = '/content/gdrive/My Drive/cifar-100-python'

wordLabels = [
    'apple', 'aquarium_fish', 'baby', 'bear', 'beaver', 'bed', 'bee', 'beetle', 
    'bicycle', 'bottle', 'bowl', 'boy', 'bridge', 'bus', 'butterfly', 'camel', 
    'can', 'castle', 'caterpillar', 'cattle', 'chair', 'chimpanzee', 'clock', 
    'cloud', 'cockroach', 'couch', 'crab', 'crocodile', 'cup', 'dinosaur', 
    'dolphin', 'elephant', 'flatfish', 'forest', 'fox', 'girl', 'hamster', 
    'house', 'kangaroo', 'keyboard', 'lamp', 'lawn_mower', 'leopard', 'lion',
    'lizard', 'lobster', 'man', 'maple_tree', 'motorcycle', 'mountain', 'mouse',
    'mushroom', 'oak_tree', 'orange', 'orchid', 'otter', 'palm_tree', 'pear',
    'pickup_truck', 'pine_tree', 'plain', 'plate', 'poppy', 'porcupine',
    'possum', 'rabbit', 'raccoon', 'ray', 'road', 'rocket', 'rose',
    'sea', 'seal', 'shark', 'shrew', 'skunk', 'skyscraper', 'snail', 'snake',
    'spider', 'squirrel', 'streetcar', 'sunflower', 'sweet_pepper', 'table',
    'tank', 'telephone', 'television', 'tiger', 'tractor', 'train', 'trout',
    'tulip', 'turtle', 'wardrobe', 'whale', 'willow_tree', 'wolf', 'woman',
    'worm'
]

from keras.datasets import cifar100

#No Coarse Labels
(TRAINING_IMAGES, trainLabels), (TESTING_IMAGES, testLabels) = cifar100.load_data(label_mode='fine')

plt.imshow(TRAINING_IMAGES[2], interpolation='nearest')
plt.show()

import keras
IMG_SHAPE = (32,32,3)

x_train = np.asarray(TRAINING_IMAGES).reshape(50000,32, 32, 3)   
x_test = np.asarray(TESTING_IMAGES).reshape(10000,32, 32, 3)

x_train = x_train/ 255
x_test = x_test/ 255
numLabels = keras.utils.to_categorical(trainLabels)
testLabels = keras.utils.to_categorical(testLabels)

from keras.models import Sequential
from keras.layers import Flatten, Dense, Lambda
from keras.layers import Conv2D, Dropout, Activation, MaxPooling2D
from keras.layers.normalization import BatchNormalization
from keras.callbacks import ModelCheckpoint, EarlyStopping
from keras import backend as K
K.set_image_dim_ordering('tf')
IMAGE_HEIGHT = 32
IMAGE_WIDTH = 32

#!pip install keras==2.2.4

#from keras.applications.inception_v3 import InceptionV3
#base_model = InceptionV3(weights='imagenet', include_top=False)

#for layer in base_model.layers[:-12]:
 #   layer.trainable = False
 

def myNet():
    model = Sequential()
    #model.add(base_model)
    model.add(Conv2D(16,kernel_size=(3,3),activation='relu',input_shape=(IMAGE_HEIGHT,IMAGE_WIDTH,3)))
    model.add(Conv2D(16,kernel_size=(3,3),activation='relu'))
    model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
    model.add(Dropout(0.5))

    model.add(Conv2D(16,kernel_size=(3,3),activation='relu'))
    model.add(Conv2D(16,kernel_size=(3,3),activation='relu'))
    model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
    model.add(Dropout(0.5))
    
    
    
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.50))
    model.add(Dense(100, activation='softmax'))
   
    
    
    return model
    
model = myNet()

#Compile

base_learning_rate = 0.0001
model.compile(optimizer= 'adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

initial_epochs = 5
steps_per_epoch = 1000
validation_steps = 20
BATCH_SIZE = 256
SHUFFLE_BUFFER_SIZE = 1000

callbacks_list = None
H = model.fit(x_train, numLabels, validation_data=(x_test, testLabels), 
              epochs=initial_epochs, batch_size=BATCH_SIZE, callbacks=callbacks_list)

#Further Training
#Compile

model.compile(loss='categorical_crossentropy',
              optimizer = 'adamax',
              metrics=['accuracy'])

#model.summary()

#Further Training- Builds on Convergence
history = model.fit(x_train, numLabels, validation_data=(x_test, testLabels), 
              epochs=15, batch_size=BATCH_SIZE, callbacks=callbacks_list)
